% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_extrema.R
\name{find_peaks}
\alias{find_peaks}
\title{Find Peaks in Time Series Data}
\usage{
find_peaks(
  x,
  min_height = -Inf,
  min_prominence = 0,
  plateau_handling = c("strict", "middle", "first", "last", "all"),
  window_size = 3
)
}
\arguments{
\item{x}{Numeric vector containing the time series data}

\item{min_height}{Minimum height threshold for peaks (default: -Inf)}

\item{min_prominence}{Minimum prominence threshold for peaks (default: 0)}

\item{plateau_handling}{String specifying how to handle plateaus. One of:
\itemize{
\item "strict" (default): No points in plateau are peaks
\item "middle": Middle point(s) of plateau are peaks
\item "first": First point of plateau is peak
\item "last": Last point of plateau is peak
\item "all": All points in plateau are peaks
}}

\item{window_size}{Integer specifying the size of the window to use for peak detection (default: 3).
Must be odd and >= 3. Larger values detect peaks over wider ranges.}
}
\value{
A logical vector of the same length as the input where:
\itemize{
\item \code{TRUE} indicates a confirmed peak
\item \code{FALSE} indicates a non-peak
\item \code{NA} indicates peak status could not be determined due to missing data
}
}
\description{
Identifies peaks (local maxima) in a numeric time series, with options to filter peaks based on
height and prominence. The function handles missing values (NA) appropriately and is compatible
with dplyr's mutate. Includes flexible handling of plateaus and adjustable window size for peak detection.
}
\details{
The function uses a sliding window algorithm for peak detection (window size specified by window_size parameter),
combined with a region-based prominence calculation method similar to that described in Palshikar (2009).
}
\note{
\itemize{
\item The function is optimized for use with dplyr's mutate
\item For noisy data, consider using a larger window_size or smoothing the series before peak detection
\item Adjust min_height and min_prominence to filter out unwanted peaks
\item Choose plateau_handling based on your specific needs
\item Larger window_size values result in more stringent peak detection
}
}
\section{Peak Detection}{
A point is considered a peak if it is the highest point within its window (default window_size of 3
compares each point with its immediate neighbors). The first and last (window_size-1)/2 points in the
series cannot be peaks and are marked as NA. Larger window sizes will identify peaks that dominate over
a wider range, typically resulting in fewer peaks being detected.
}

\section{Prominence}{
Prominence measures how much a peak stands out relative to its surrounding values.
It is calculated as the height of the peak minus the height of the highest minimum
between this peak and any higher peaks (or the end of the series if no higher peaks exist).
}

\section{Plateau Handling}{
Plateaus (sequences of identical values) are handled according to the plateau_handling parameter:
\itemize{
\item strict: No points in a plateau are considered peaks (traditional behavior)
\item middle: For plateaus of odd length, the middle point is marked as a peak.
For plateaus of even length, the two middle points are marked as peaks.
\item first: The first point of each plateau is marked as a peak
\item last: The last point of each plateau is marked as a peak
\item all: Every point in the plateau is marked as a peak
}

Note that in all cases, the plateau must still qualify as a peak relative to its
surrounding window (i.e., higher than all other points in the window).
}

\section{Missing Values (NA) Handling}{
The function uses the following rules for handling NAs:
\itemize{
\item If a point is NA, it cannot be a peak (returns NA)
\item If any point in the window is NA, peak status cannot be determined (returns NA)
\item For prominence calculations, stretches of NAs are handled appropriately
\item A minimum of window_size points is required; shorter series return all NAs
}
}

\examples{
# Basic usage with default window size (3)
x <- c(1, 3, 2, 6, 4, 5, 2)
find_peaks(x)

# With larger window size
find_peaks(x, window_size = 5)  # More stringent peak detection

# With minimum height
find_peaks(x, min_height = 4, window_size = 3)

# With plateau handling
x <- c(1, 3, 3, 3, 2, 4, 4, 1)
find_peaks(x, plateau_handling = "middle", window_size = 3)  # Middle of plateaus
find_peaks(x, plateau_handling = "all", window_size = 5)     # All plateau points

# With missing values
x <- c(1, 3, NA, 6, 4, NA, 2)
find_peaks(x)

# Usage with dplyr
library(dplyr)
data_frame(
  time = 1:10,
  value = c(1, 3, 7, 4, 2, 6, 5, 8, 4, 2)
) \%>\%
  mutate(peaks = find_peaks(value, window_size = 3))

}
\references{
Palshikar, G. (2009). Simple Algorithms for Peak Detection in Time-Series.
Proc. 1st Int. Conf. Advanced Data Analysis, Business Analytics and Intelligence.
}
\seealso{
\itemize{
\item \code{\link{find_troughs}} for finding local minima
\item \code{\link[pracma]{findpeaks}} in the pracma package for alternative peak detection methods
}
}
