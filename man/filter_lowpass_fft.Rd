% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_bandwidth.R
\name{filter_lowpass_fft}
\alias{filter_lowpass_fft}
\title{Apply FFT-based Lowpass Filter to Signal}
\usage{
filter_lowpass_fft(x, cutoff_freq, sampling_rate)
}
\arguments{
\item{x}{Numeric vector containing the signal to be filtered}

\item{cutoff_freq}{Cutoff frequency in Hz}

\item{sampling_rate}{Sampling rate of the signal in Hz}

\item{na_action}{How to handle NA values:
- "interpolate": Linear interpolation of NAs (default)
- "remove": Remove NAs and adjust time indices
- "error": Raise an error if NAs are present}
}
\value{
Numeric vector containing the filtered signal
}
\description{
This function implements a lowpass filter using the Fast Fourier Transform (FFT).
It provides a sharp frequency cutoff but may introduce ringing artifacts (Gibbs phenomenon).
}
\details{
FFT-based filtering applies a hard cutoff in the frequency domain. This can be
advantageous for:
\itemize{
\item Precise frequency selection
\item Batch processing of long signals
\item Cases where sharp frequency cutoffs are desired
}

Limitations:
\itemize{
\item May introduce ringing artifacts
\item Assumes periodic signal (can cause edge effects)
\item Less suitable for real-time processing
}

Missing Value Handling:
See lowpass_filter documentation for details on NA handling approaches.
}
\examples{
# Compare Butterworth and FFT filtering
t <- seq(0, 1, by = 0.001)
x <- sin(2*pi*2*t) + sin(2*pi*50*t)
butter_filtered <- filter_lowpass(x, 5, 1000)
fft_filtered <- filter_lowpass_fft(x, 5, 1000)

}
\seealso{
\code{\link{highpass_filter_fft}} for FFT-based high-pass filtering
\code{\link{lowpass_filter}} for Butterworth-based filtering
}
